#pragma once

#ifdef RED4EXT_STATIC_LIB
#include <RED4ext/Process.hpp>
#endif
#include <RED4ext/Relocation.hpp>

// This file has been generated by zoltan (https://github.com/jac3km4/zoltan)

#define Process_CloseHandles_Addr 0x2C23B30
#define Process_Execute_Addr 0x2C23D70
#define Process_Execute_0_Addr 0x2C23DD0
#define Process_GetExitCode_Addr 0x2C23B60
#define Process_Process_Addr 0x2C23AA0
#define Process_ReadFromPipe_Addr 0x2C23B90
#define Process_Terminate_Addr 0x2C24040
#define Process_WaitUntilCompleted_Addr 0x2C240B0

inline bool RED4ext::Process::CloseHandles()
{
    using Process_CloseHandles_t = bool (*)(RED4ext::Process*);
    RED4ext::RelocFunc<Process_CloseHandles_t> call(Process_CloseHandles_Addr);
    return call(this);
}

inline bool RED4ext::Process::Execute(const RED4ext::CString& a1, RED4ext::CWideString& a2,
                                      const RED4ext::CString& a3, const RED4ext::Process::ExecutionFlags a4)
{
    using Process_Execute_t = bool (*)(RED4ext::Process*, const RED4ext::CString&, RED4ext::CWideString&,
                                       const RED4ext::CString&, const RED4ext::Process::ExecutionFlags);
    RED4ext::RelocFunc<Process_Execute_t> call(Process_Execute_Addr);
    return call(this, a1, a2, a3, a4);
}

inline bool RED4ext::Process::Execute(const RED4ext::CString& a1, RED4ext::CWideString& a2,
                                      const RED4ext::CWideString& a3,
                                      const RED4ext::Process::ExecutionFlags a4)
{
    using Process_Execute_0_t = bool (*)(RED4ext::Process*, const RED4ext::CString&, RED4ext::CWideString&,
                                         const RED4ext::CWideString&, const RED4ext::Process::ExecutionFlags);
    RED4ext::RelocFunc<Process_Execute_0_t> call(Process_Execute_0_Addr);
    return call(this, a1, a2, a3, a4);
}

inline uint32_t RED4ext::Process::GetExitCode()
{
    using Process_GetExitCode_t = uint32_t (*)(RED4ext::Process*);
    RED4ext::RelocFunc<Process_GetExitCode_t> call(Process_GetExitCode_Addr);
    return call(this);
}

inline void RED4ext::Process::ReadFromPipe(const RED4ext::Process::ReadFlags a1, const RED4ext::CString& a2,
                                           RED4ext::CString& a3)
{
    using Process_ReadFromPipe_t =
        void (*)(RED4ext::Process*, const RED4ext::Process::ReadFlags, const RED4ext::CString&, RED4ext::CString&);
    RED4ext::RelocFunc<Process_ReadFromPipe_t> call(Process_ReadFromPipe_Addr);
    return call(this, a1, a2, a3);
}

inline bool RED4ext::Process::Terminate(const uint32_t a1, const bool a2)
{
    using Process_Terminate_t = bool (*)(RED4ext::Process*, const uint32_t, const bool);
    RED4ext::RelocFunc<Process_Terminate_t> call(Process_Terminate_Addr);
    return call(this, a1, a2);
}

inline bool RED4ext::Process::WaitUntilCompleted(const uint32_t a1) const
{
    using Process_WaitUntilCompleted_t = bool (*)(RED4ext::Process*, const uint32_t);
    RED4ext::RelocFunc<Process_WaitUntilCompleted_t> call(Process_WaitUntilCompleted_Addr);
    return call(this, a1);
}
